#SAMPLES = ["CH1","CH2","CH3","CH4","PA1","PA2","PA3","PA4"]
#SAMPLES = ["CH1"]

rule all:
	input:
		"gatk.report.html"

rule bwa_map:
	input:
		"/ufrc/kirst/d.ence/Pnigra_Sempervirens/ref_genomes/P.nigra/Consensus_71077-308_version0915-MER.fa",
		"/ufrc/kirst/share/Pnigra_Sempervirens/raw/{sample}/{sample}_R2_reverse_paired.trim.fq.gz",
		"/ufrc/kirst/share/Pnigra_Sempervirens/raw/{sample}/{sample}_R1_forward_paired.trim.fq.gz",
	output:
		temp("mapped_reads/{sample}.bam")
	params:
		rg="@RG\tID:{sample}\tSM:{sample}"
	threads: 4
	shell:
		"module load bwa; bwa mem -R '{params.rg}' -t {threads} {input} | samtools view -Sb > {output}"

#rule extract_discordant:
#	input:
#		"mapped_reads/{sample}.bam"
#	output:
#		temp("discordants/{sample}.discordants.unsorted.bam")
#	shell:
#		"module load samtools; samtools view -b -F 1294 {input} > {output}"
#
#rule extract_split_reads:
#	input:
#		"discordants/{sample}.discordants.unsorted.bam"
#	output:
#		temp("split_reads/{sample}.splitters.unsorted.bam")
#	shell#:
#		"module load samtools; module load lumpy; samtools view -h {input} | "
#		" $HPC_LUMPY_DIR/scripts/extractSplitReads_BwaMem -i stdin | "
#		" samtools view -Sb - > {output}"	

rule samtools_sort:
	input:
		"mapped_reads/{sample}.bam"
	output:
		"sorted_reads/{sample}.sorted.bam"
	shell:
		"module load samtools; samools sort {input} > {output}"

rule samtools_rmdup:
	input:
		"sorted_reads/{sample}.sorted.bam"
	output:
		"rmduped_reads/{sample}.sorted.rmdup.bam"
	shell:
		"module load samtools; samtools rmdup {input} > {output}"

rule samtools_index_sorted:
	input:
		"rmduped_reads/{sample}.sorted.rmdup.bam"
	output:
		"rmduped_reads/{sample}.sorted.rmdup.bam.bai"
	shell:
		"module load samtools; samtool index {input}"

rule samtools_index_realigned:
	input:
		"indel_realigned/{sample}.sorted.rmdup.realigned.bam"
	output:
		"indel_realigned/{sample}.sorted.rmdup.realigned.bam.bai"
	shell:
		"module load samtools; samtools index {input}"

rule gatk_indel_create:
	input:
		ref="/ufrc/kirst/d.ence/Pnigra_Sempervirens/ref_genomes/P.nigra/Consensus_71077-308_version0915-MER.fa",
		bam="rmduped_reads/{sample}.sorted.rmdup.bam"
	output:
		"indel_target_regions/{sample}.interval"
	shell:
		"module load gatk; export_JAVA_OPTIONS=\"-Xmx4g\"; GenomeAnalysisTK -T RealignerTargetCreator -R {input.ref} -I {input.bam} -o {output}"

rule gatk_indel_realign:
	input:
		ref="/ufrc/kirst/d.ence/Pnigra_Sempervirens/ref_genomes/P.nigra/Consensus_71077-308_version0915-MER.fa",
		bam="rmduped_reads/{sample}.sorted.rmdup.bam",
		interval="indel_target_regions/{sample}.interval"
	output:
		"indel_realigned/{sample}.sorted.rmdup.realigned.bam"
	threads: 4
	shell:
		"module load gatk; export_JAVA_OPTIONS=\"-Xmx4g\"; GenomeAnalysisTK -T IndelRealigner -R {input.ref} -nt {threads} -I {input.bam} -targetIntervals {input.interval} -o {output} "

rule gatk_unified_genotyper:
	input:
		"/ufrc/kirst/d.ence/Pnigra_Sempervirens/ref_genomes/P.nigra/Consensus_71077-308_version0915-MER.fa",
		bam=expand("indel_realigned/{sample}.sorted.rmdup.realigned.bam", sample=config["samples"]),
		bai=expand("indel_realigned/{sample}.sorted.rmdup.realigned.bam.bai", sample=config["samples"])	
	output:
		"calls/all_samples.P.nigra.gatk_UG.vcf"
	threads: 4
	shell:
		"module load gatk; export_JAVA_OPTIONS=\"-Xmx4g\"; GenomeAnalysisTK -T UnifiedGenotyper -R {input.ref} -nt {threads} -I {input.bam} -gt_mode DISCOVERY -out_mode EMIT_VARIANTS_ONLY --genotype_likelihoods_model BOTH -o {output} "
#rule run_lumpy:
#	input:
#		tmp_sample="{sample}",
#		histo="histos/{sample}.histo",
#		discordants="discordants/{sample}.discordants.bam",
#		splitters="split_reads/{sample}.splitters.bam"	
#	output:
#		"calls/multi_sample.lumpy.vcf"	
#	shell:
#		command_line = "lumpy -mw 4 -tt 0 " 
#		for tmp in SAMPLES:
#			line = "-pe id:{input.tmp_sample},bam_file:{input.discordants},histo_file:{input.histo},mean:500,stdev:50,read_length:101,min_non_overlap:101,discordant_z:5,back_distance:10,weight:1,min_mapping_threshold:20 "
#			line = line + " -sr id:{tmp_sample},bam_file:{input.splitters},back_distance:10,weight:1,min_mapping_threshold:20 "
#			command_line = command_line + line	
#		command_line = command_line + " > {output}"	
#		command_line
rule report:
	input:
		"calls/all_samples.P.nigra.gatk_UG.vcf"
	output:
		"gatk.report.html"
	run:
		from snakemake.utils import report
		with open(input[0]) as vcf:
			n_calls = sum(1 for l in vcf if not l.startswith("#"))

		report("""
		A first test of a structural variant calling workflow
		=====================================================
		
		Reads were mapped to the P.nigra
		reference genome and variants were called jointly with
		gatk unified genotyper.

		This resulted in <dummy> variants (see Table T1_).
		""", output[0], T1=input[0])
